// This file contains all the message definitions and service declarations for the Node protocol.

syntax = "proto3";

package proto.node;
option go_package = "github.com/flavio-simonelli/Gupta-Implementation/api/proto/node;protonode";

import "google/protobuf/empty.proto"; // minimal ack

message Node {
  string node_id = 1; // Unique identifier for the node in hexadecimal format
  string address = 2; // address of the node in the format "ip:port"
}

message NodeInfo {
  Node node = 1; // Node information
  bool supernode = 3; // Indicates if the node is a supernode
}

message Entry {
  NodeInfo node = 1;
  bool is_slice_leader = 4; // Indicates if the node is a slice leader
  bool is_unit_leader = 5; // Indicates if the node is a unit leader
}

// ----- Info di redirect da inserire in google.rpc.Status.details -----
message RedirectInfo {
  string target = 1;      // Node to which the request should be redirected
}

// ----- message dissemination -----
enum EventType {
  JOIN  = 0;
  LEAVE_NORMAL  = 1;
  LEAVE_UNITLEADER  = 2;
  LEAVE_SLICELEADER  = 3;
}

message Event {
  Entry entry = 1;
  EventType event_type = 2; // Type of event (JOIN, LEAVE_NORMAL, LEAVE_UNITLEADER, LEAVE_SLICELEADER)
}

// ----- Resource -----
message ResourceMetadata {
  string filename  = 2;         // name (deriving key)
  uint64 size  = 3;         // total size in bytes
}

message StoreChunk {
  string filename = 1;  // filename (deriving key)
  uint64 offset       = 2;  // byte offset (for resume/verify)
  bytes  data         = 3;  // payload
  bool   eof          = 4;  // true in the last chunk of the resource
}

message Resource {
  oneof payload {
    ResourceMetadata resource_metadata = 1; // Metadata of the resource
    StoreChunk store_chunk = 2; // Chunk of the resource
  }
}

// ----- Routing Table -----
message RoutingTableChunk {
  repeated Entry entries = 1; // List of routing entries
}

// ----- Join Request -----
message FindSuccessorResponse {
  string address = 1; // address of the node in the format "ip:port"
}
message BecomePredecessorRequest {
  NodeInfo node = 1; // Node that is becoming the predecessor
}
message BecomePredecessorResponse {
  oneof payload {
    RoutingTableChunk routing_chunk = 1; // Routing table chunk
    Resource resource = 2; // Resource to be stored (one of metadata or chunk)
    }
}
message BecomeSuccessorRequest {
  NodeInfo new_successor = 1; // New successor node
}

// ----- Leave Request -----
message NotifySuccessorLeaveRequest {
  Node node = 1; // Node that is leaving the network
}
message NotifyPredecessorLeaveRequest {
  Node node = 1; // Node that is leaving the network
}

// ----- Lookup Request -----
message LookupRequest {
  string key = 1; // Key to look up in the network
}



// ------ Services ------

// in the header of the packet is always insert the node_id of the sender

service JoinService {
  // the id node is in the request header
  rpc FindSuccessor(google.protobuf.Empty)
      returns (FindSuccessorResponse);

  // if the node isn't the successor of the target node:
  //   → codes.FAILED_PRECONDITION + RedirectInfo{target=realSuccessor}
  rpc BecomePredecessor(BecomePredecessorRequest)
      returns (stream BecomePredecessorResponse);

  // if the node isn't the predecessor of the target node:
  //   → codes.FAILED_PRECONDITION + RedirectInfo{target=realPredecessor}
  rpc BecomeSuccessor(BecomeSuccessorRequest)
      returns (google.protobuf.Empty);

}

service LeaveService {
  rpc NotifySuccessorLeave(NotifySuccessorLeaveRequest)
      returns (google.protobuf.Empty);

  rpc SendResourceSuccessor(stream Resource)
      returns (google.protobuf.Empty);

  rpc NotifyPredecessorLeave(NotifyPredecessorLeaveRequest)
      returns (google.protobuf.Empty);
}

service StorageService {
  //   NON responsabile → FAILED_PRECONDITION + RedirectInfo{target=responsabile}
  rpc Store(stream Resource) returns (google.protobuf.Empty);

  // === FETCH ===
  //   NON responsabile → FAILED_PRECONDITION
  rpc Fetch(LookupRequest) returns (stream Resource);
}

service DisseminationService {
  rpc Notify(stream Event) returns (google.protobuf.Empty);
}

