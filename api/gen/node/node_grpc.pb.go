// This file contains all the message definitions and service declarations for the Node protocol.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: node/node.proto

package protonode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JoinService_FindPredecessor_FullMethodName   = "/proto.node.JoinService/FindPredecessor"
	JoinService_BecomeSuccessor_FullMethodName   = "/proto.node.JoinService/BecomeSuccessor"
	JoinService_BecomePredecessor_FullMethodName = "/proto.node.JoinService/BecomePredecessor"
)

// JoinServiceClient is the client API for JoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoinServiceClient interface {
	// the id node is in the request header
	FindPredecessor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeInfo, error)
	// if the node isn't the predecessor of the target node:
	//
	//	→ codes.FAILED_PRECONDITION + RedirectInfo{target=realPredecessor}
	BecomeSuccessor(ctx context.Context, in *BecomeSuccessorRequest, opts ...grpc.CallOption) (*NodeInfo, error)
	// if the node isn't the successor of the target node:
	//
	//	→ codes.FAILED_PRECONDITION + RedirectInfo{target=realSuccessor}
	BecomePredecessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BecomePredecessorResponse], error)
}

type joinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinServiceClient(cc grpc.ClientConnInterface) JoinServiceClient {
	return &joinServiceClient{cc}
}

func (c *joinServiceClient) FindPredecessor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, JoinService_FindPredecessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinServiceClient) BecomeSuccessor(ctx context.Context, in *BecomeSuccessorRequest, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, JoinService_BecomeSuccessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinServiceClient) BecomePredecessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BecomePredecessorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[0], JoinService_BecomePredecessor_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeInfo, BecomePredecessorResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_BecomePredecessorClient = grpc.ServerStreamingClient[BecomePredecessorResponse]

// JoinServiceServer is the server API for JoinService service.
// All implementations must embed UnimplementedJoinServiceServer
// for forward compatibility.
type JoinServiceServer interface {
	// the id node is in the request header
	FindPredecessor(context.Context, *emptypb.Empty) (*NodeInfo, error)
	// if the node isn't the predecessor of the target node:
	//
	//	→ codes.FAILED_PRECONDITION + RedirectInfo{target=realPredecessor}
	BecomeSuccessor(context.Context, *BecomeSuccessorRequest) (*NodeInfo, error)
	// if the node isn't the successor of the target node:
	//
	//	→ codes.FAILED_PRECONDITION + RedirectInfo{target=realSuccessor}
	BecomePredecessor(*NodeInfo, grpc.ServerStreamingServer[BecomePredecessorResponse]) error
	mustEmbedUnimplementedJoinServiceServer()
}

// UnimplementedJoinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJoinServiceServer struct{}

func (UnimplementedJoinServiceServer) FindPredecessor(context.Context, *emptypb.Empty) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPredecessor not implemented")
}
func (UnimplementedJoinServiceServer) BecomeSuccessor(context.Context, *BecomeSuccessorRequest) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BecomeSuccessor not implemented")
}
func (UnimplementedJoinServiceServer) BecomePredecessor(*NodeInfo, grpc.ServerStreamingServer[BecomePredecessorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BecomePredecessor not implemented")
}
func (UnimplementedJoinServiceServer) mustEmbedUnimplementedJoinServiceServer() {}
func (UnimplementedJoinServiceServer) testEmbeddedByValue()                     {}

// UnsafeJoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinServiceServer will
// result in compilation errors.
type UnsafeJoinServiceServer interface {
	mustEmbedUnimplementedJoinServiceServer()
}

func RegisterJoinServiceServer(s grpc.ServiceRegistrar, srv JoinServiceServer) {
	// If the following call pancis, it indicates UnimplementedJoinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JoinService_ServiceDesc, srv)
}

func _JoinService_FindPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServiceServer).FindPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoinService_FindPredecessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServiceServer).FindPredecessor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoinService_BecomeSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BecomeSuccessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServiceServer).BecomeSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoinService_BecomeSuccessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServiceServer).BecomeSuccessor(ctx, req.(*BecomeSuccessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoinService_BecomePredecessor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JoinServiceServer).BecomePredecessor(m, &grpc.GenericServerStream[NodeInfo, BecomePredecessorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_BecomePredecessorServer = grpc.ServerStreamingServer[BecomePredecessorResponse]

// JoinService_ServiceDesc is the grpc.ServiceDesc for JoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.node.JoinService",
	HandlerType: (*JoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPredecessor",
			Handler:    _JoinService_FindPredecessor_Handler,
		},
		{
			MethodName: "BecomeSuccessor",
			Handler:    _JoinService_BecomeSuccessor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BecomePredecessor",
			Handler:       _JoinService_BecomePredecessor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node/node.proto",
}

const (
	LeaveService_NotifySuccessorLeave_FullMethodName   = "/proto.node.LeaveService/NotifySuccessorLeave"
	LeaveService_SendResourceSuccessor_FullMethodName  = "/proto.node.LeaveService/SendResourceSuccessor"
	LeaveService_NotifyPredecessorLeave_FullMethodName = "/proto.node.LeaveService/NotifyPredecessorLeave"
)

// LeaveServiceClient is the client API for LeaveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveServiceClient interface {
	NotifySuccessorLeave(ctx context.Context, in *NotifySuccessorLeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendResourceSuccessor(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Resource, emptypb.Empty], error)
	NotifyPredecessorLeave(ctx context.Context, in *NotifyPredecessorLeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type leaveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveServiceClient(cc grpc.ClientConnInterface) LeaveServiceClient {
	return &leaveServiceClient{cc}
}

func (c *leaveServiceClient) NotifySuccessorLeave(ctx context.Context, in *NotifySuccessorLeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeaveService_NotifySuccessorLeave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveServiceClient) SendResourceSuccessor(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Resource, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LeaveService_ServiceDesc.Streams[0], LeaveService_SendResourceSuccessor_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Resource, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LeaveService_SendResourceSuccessorClient = grpc.ClientStreamingClient[Resource, emptypb.Empty]

func (c *leaveServiceClient) NotifyPredecessorLeave(ctx context.Context, in *NotifyPredecessorLeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeaveService_NotifyPredecessorLeave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveServiceServer is the server API for LeaveService service.
// All implementations must embed UnimplementedLeaveServiceServer
// for forward compatibility.
type LeaveServiceServer interface {
	NotifySuccessorLeave(context.Context, *NotifySuccessorLeaveRequest) (*emptypb.Empty, error)
	SendResourceSuccessor(grpc.ClientStreamingServer[Resource, emptypb.Empty]) error
	NotifyPredecessorLeave(context.Context, *NotifyPredecessorLeaveRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLeaveServiceServer()
}

// UnimplementedLeaveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaveServiceServer struct{}

func (UnimplementedLeaveServiceServer) NotifySuccessorLeave(context.Context, *NotifySuccessorLeaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySuccessorLeave not implemented")
}
func (UnimplementedLeaveServiceServer) SendResourceSuccessor(grpc.ClientStreamingServer[Resource, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendResourceSuccessor not implemented")
}
func (UnimplementedLeaveServiceServer) NotifyPredecessorLeave(context.Context, *NotifyPredecessorLeaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPredecessorLeave not implemented")
}
func (UnimplementedLeaveServiceServer) mustEmbedUnimplementedLeaveServiceServer() {}
func (UnimplementedLeaveServiceServer) testEmbeddedByValue()                      {}

// UnsafeLeaveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveServiceServer will
// result in compilation errors.
type UnsafeLeaveServiceServer interface {
	mustEmbedUnimplementedLeaveServiceServer()
}

func RegisterLeaveServiceServer(s grpc.ServiceRegistrar, srv LeaveServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaveService_ServiceDesc, srv)
}

func _LeaveService_NotifySuccessorLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifySuccessorLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).NotifySuccessorLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_NotifySuccessorLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).NotifySuccessorLeave(ctx, req.(*NotifySuccessorLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveService_SendResourceSuccessor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeaveServiceServer).SendResourceSuccessor(&grpc.GenericServerStream[Resource, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LeaveService_SendResourceSuccessorServer = grpc.ClientStreamingServer[Resource, emptypb.Empty]

func _LeaveService_NotifyPredecessorLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyPredecessorLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).NotifyPredecessorLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveService_NotifyPredecessorLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).NotifyPredecessorLeave(ctx, req.(*NotifyPredecessorLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveService_ServiceDesc is the grpc.ServiceDesc for LeaveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.node.LeaveService",
	HandlerType: (*LeaveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifySuccessorLeave",
			Handler:    _LeaveService_NotifySuccessorLeave_Handler,
		},
		{
			MethodName: "NotifyPredecessorLeave",
			Handler:    _LeaveService_NotifyPredecessorLeave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendResourceSuccessor",
			Handler:       _LeaveService_SendResourceSuccessor_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "node/node.proto",
}

const (
	StorageService_Store_FullMethodName = "/proto.node.StorageService/Store"
	StorageService_Fetch_FullMethodName = "/proto.node.StorageService/Fetch"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	// NON responsabile → FAILED_PRECONDITION + RedirectInfo{target=responsabile}
	Store(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Resource, emptypb.Empty], error)
	// === FETCH ===
	//
	//	NON responsabile → FAILED_PRECONDITION
	Fetch(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) Store(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Resource, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[0], StorageService_Store_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Resource, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageService_StoreClient = grpc.ClientStreamingClient[Resource, emptypb.Empty]

func (c *storageServiceClient) Fetch(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[1], StorageService_Fetch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LookupRequest, Resource]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageService_FetchClient = grpc.ServerStreamingClient[Resource]

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility.
type StorageServiceServer interface {
	// NON responsabile → FAILED_PRECONDITION + RedirectInfo{target=responsabile}
	Store(grpc.ClientStreamingServer[Resource, emptypb.Empty]) error
	// === FETCH ===
	//
	//	NON responsabile → FAILED_PRECONDITION
	Fetch(*LookupRequest, grpc.ServerStreamingServer[Resource]) error
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageServiceServer struct{}

func (UnimplementedStorageServiceServer) Store(grpc.ClientStreamingServer[Resource, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedStorageServiceServer) Fetch(*LookupRequest, grpc.ServerStreamingServer[Resource]) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}
func (UnimplementedStorageServiceServer) testEmbeddedByValue()                        {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).Store(&grpc.GenericServerStream[Resource, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageService_StoreServer = grpc.ClientStreamingServer[Resource, emptypb.Empty]

func _StorageService_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LookupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).Fetch(m, &grpc.GenericServerStream[LookupRequest, Resource]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageService_FetchServer = grpc.ServerStreamingServer[Resource]

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.node.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _StorageService_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Fetch",
			Handler:       _StorageService_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node/node.proto",
}

const (
	DisseminationService_FlowNotify_FullMethodName = "/proto.node.DisseminationService/FlowNotify"
	DisseminationService_SLNotify_FullMethodName   = "/proto.node.DisseminationService/SLNotify"
	DisseminationService_BecomeSL_FullMethodName   = "/proto.node.DisseminationService/BecomeSL"
	DisseminationService_BecomeUL_FullMethodName   = "/proto.node.DisseminationService/BecomeUL"
)

// DisseminationServiceClient is the client API for DisseminationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisseminationServiceClient interface {
	FlowNotify(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventChunk, emptypb.Empty], error)
	SLNotify(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventChunk, emptypb.Empty], error)
	BecomeSL(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BecomeUL(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type disseminationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDisseminationServiceClient(cc grpc.ClientConnInterface) DisseminationServiceClient {
	return &disseminationServiceClient{cc}
}

func (c *disseminationServiceClient) FlowNotify(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventChunk, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DisseminationService_ServiceDesc.Streams[0], DisseminationService_FlowNotify_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventChunk, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DisseminationService_FlowNotifyClient = grpc.ClientStreamingClient[EventChunk, emptypb.Empty]

func (c *disseminationServiceClient) SLNotify(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventChunk, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DisseminationService_ServiceDesc.Streams[1], DisseminationService_SLNotify_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventChunk, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DisseminationService_SLNotifyClient = grpc.ClientStreamingClient[EventChunk, emptypb.Empty]

func (c *disseminationServiceClient) BecomeSL(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DisseminationService_BecomeSL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disseminationServiceClient) BecomeUL(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DisseminationService_BecomeUL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisseminationServiceServer is the server API for DisseminationService service.
// All implementations must embed UnimplementedDisseminationServiceServer
// for forward compatibility.
type DisseminationServiceServer interface {
	FlowNotify(grpc.ClientStreamingServer[EventChunk, emptypb.Empty]) error
	SLNotify(grpc.ClientStreamingServer[EventChunk, emptypb.Empty]) error
	BecomeSL(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	BecomeUL(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDisseminationServiceServer()
}

// UnimplementedDisseminationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDisseminationServiceServer struct{}

func (UnimplementedDisseminationServiceServer) FlowNotify(grpc.ClientStreamingServer[EventChunk, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method FlowNotify not implemented")
}
func (UnimplementedDisseminationServiceServer) SLNotify(grpc.ClientStreamingServer[EventChunk, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SLNotify not implemented")
}
func (UnimplementedDisseminationServiceServer) BecomeSL(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BecomeSL not implemented")
}
func (UnimplementedDisseminationServiceServer) BecomeUL(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BecomeUL not implemented")
}
func (UnimplementedDisseminationServiceServer) mustEmbedUnimplementedDisseminationServiceServer() {}
func (UnimplementedDisseminationServiceServer) testEmbeddedByValue()                              {}

// UnsafeDisseminationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisseminationServiceServer will
// result in compilation errors.
type UnsafeDisseminationServiceServer interface {
	mustEmbedUnimplementedDisseminationServiceServer()
}

func RegisterDisseminationServiceServer(s grpc.ServiceRegistrar, srv DisseminationServiceServer) {
	// If the following call pancis, it indicates UnimplementedDisseminationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DisseminationService_ServiceDesc, srv)
}

func _DisseminationService_FlowNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DisseminationServiceServer).FlowNotify(&grpc.GenericServerStream[EventChunk, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DisseminationService_FlowNotifyServer = grpc.ClientStreamingServer[EventChunk, emptypb.Empty]

func _DisseminationService_SLNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DisseminationServiceServer).SLNotify(&grpc.GenericServerStream[EventChunk, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DisseminationService_SLNotifyServer = grpc.ClientStreamingServer[EventChunk, emptypb.Empty]

func _DisseminationService_BecomeSL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisseminationServiceServer).BecomeSL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisseminationService_BecomeSL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisseminationServiceServer).BecomeSL(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisseminationService_BecomeUL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisseminationServiceServer).BecomeUL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisseminationService_BecomeUL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisseminationServiceServer).BecomeUL(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DisseminationService_ServiceDesc is the grpc.ServiceDesc for DisseminationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisseminationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.node.DisseminationService",
	HandlerType: (*DisseminationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BecomeSL",
			Handler:    _DisseminationService_BecomeSL_Handler,
		},
		{
			MethodName: "BecomeUL",
			Handler:    _DisseminationService_BecomeUL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FlowNotify",
			Handler:       _DisseminationService_FlowNotify_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SLNotify",
			Handler:       _DisseminationService_SLNotify_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "node/node.proto",
}
