// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: client/client.proto

package protoclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientService_GetRoutingTable_FullMethodName = "/proto.client.ClientService/GetRoutingTable"
	ClientService_GetResource_FullMethodName     = "/proto.client.ClientService/GetResource"
	ClientService_StoreResource_FullMethodName   = "/proto.client.ClientService/StoreResource"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	GetRoutingTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoutingTableResponse, error)
	GetResource(ctx context.Context, in *RequestResource, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResourceResponse], error)
	StoreResource(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ResourceResponse, emptypb.Empty], error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) GetRoutingTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoutingTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoutingTableResponse)
	err := c.cc.Invoke(ctx, ClientService_GetRoutingTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetResource(ctx context.Context, in *RequestResource, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResourceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[0], ClientService_GetResource_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestResource, ResourceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetResourceClient = grpc.ServerStreamingClient[ResourceResponse]

func (c *clientServiceClient) StoreResource(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ResourceResponse, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[1], ClientService_StoreResource_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResourceResponse, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_StoreResourceClient = grpc.ClientStreamingClient[ResourceResponse, emptypb.Empty]

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility.
type ClientServiceServer interface {
	GetRoutingTable(context.Context, *emptypb.Empty) (*RoutingTableResponse, error)
	GetResource(*RequestResource, grpc.ServerStreamingServer[ResourceResponse]) error
	StoreResource(grpc.ClientStreamingServer[ResourceResponse, emptypb.Empty]) error
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServiceServer struct{}

func (UnimplementedClientServiceServer) GetRoutingTable(context.Context, *emptypb.Empty) (*RoutingTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutingTable not implemented")
}
func (UnimplementedClientServiceServer) GetResource(*RequestResource, grpc.ServerStreamingServer[ResourceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedClientServiceServer) StoreResource(grpc.ClientStreamingServer[ResourceResponse, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method StoreResource not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}
func (UnimplementedClientServiceServer) testEmbeddedByValue()                       {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_GetRoutingTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetRoutingTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetRoutingTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetRoutingTable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestResource)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServiceServer).GetResource(m, &grpc.GenericServerStream[RequestResource, ResourceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_GetResourceServer = grpc.ServerStreamingServer[ResourceResponse]

func _ClientService_StoreResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServiceServer).StoreResource(&grpc.GenericServerStream[ResourceResponse, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientService_StoreResourceServer = grpc.ClientStreamingServer[ResourceResponse, emptypb.Empty]

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.client.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoutingTable",
			Handler:    _ClientService_GetRoutingTable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResource",
			Handler:       _ClientService_GetResource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StoreResource",
			Handler:       _ClientService_StoreResource_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "client/client.proto",
}
